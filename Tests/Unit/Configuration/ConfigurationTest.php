<?php

declare(strict_types=1);

namespace LegalWeb\GdprTools\Tests\Unit\Configuration;

use LegalWeb\GdprTools\Configuration\Configuration;
use LegalWeb\GdprTools\Exception\InvalidConfigurationException;
use Neos\Flow\Tests\UnitTestCase;

class ConfigurationTest extends UnitTestCase
{
    /**
     * @var Configuration
     */
    private $configuration;

    protected function setUp()
    {
        parent::setUp();
        // Create Configuration instance via reflection to avoid calling the proxy constructor generated by neos,
        // which would inject the settings from the yaml files.
        $reflection = new \ReflectionClass(Configuration::class);
        $this->configuration = $reflection->newInstanceWithoutConstructor();
    }

    /**
     *
     */
    public function testValid(): void
    {
        $this->configuration->injectSettings($this->validData());

        $this->assertEquals(
            'https://www.example.com',
            $this->configuration->getApiUrl()
        );
        $this->assertEquals(
            '7f4d86bb-4d44-4285-864f-65fca6e6b2cd',
            $this->configuration->getApiKey()
        );
        $this->assertEquals(
            'https://www.example.com?token=CT74.TSzcQWiVXZen2TP0eDf9_ByWT1vDT~sTD6wh5fSG-mrjQaljCH5yMxWFzo',
            $this->configuration->getCallbackUrl()
        );
        $this->assertEquals(
            'CT74.TSzcQWiVXZen2TP0eDf9_ByWT1vDT~sTD6wh5fSG-mrjQaljCH5yMxWFzo',
            $this->configuration->getCallbackToken()
        );
    }

    /**
     * @dataProvider invalidDataProvider
     * @param array<string, string> $settings
     */
    public function testInvalid(array $settings): void
    {
        $this->expectException(InvalidConfigurationException::class);

        $this->configuration->injectSettings($settings);
    }

    /**
     * @return array<string, mixed[]>
     * @throws \Exception
     */
    public function invalidDataProvider(): array
    {
        return [
            'missing apiUrl' => [[$this->unsetKey($this->validData(), 'apiUrl')]],
            'missing apiKey' => [[$this->unsetKey($this->validData(), 'apiKey')]],
            'missing callbackUrl' => [[$this->unsetKey($this->validData(), 'callbackUrl')]],
            'missing callbackToken' => [[$this->unsetKey($this->validData(), 'callbackToken')]],
            'empty apiUrl' => [[array_merge($this->validData(), ['apiUrl' => ''])]],
            'empty apiKey' => [[array_merge($this->validData(), ['apiKey' => ''])]],
            'empty callbackUrl' => [[array_merge($this->validData(), ['callbackUrl' => ''])]],
            'empty callbackToken' => [[array_merge($this->validData(), ['callbackToken' => ''])]],
            'non-string apiUrl' => [[array_merge($this->validData(), ['apiUrl' => 1])]],
            'non-string apiKey' => [[array_merge($this->validData(), ['apiKey' => false])]],
            'non-string callbackUrl' => [[array_merge($this->validData(), ['callbackUrl' => new \DateTimeImmutable()])]],
            'non-string callbackToken' => [[array_merge($this->validData(), ['callbackToken' => null])]],
            'missing token placeholder in callbackUrl' => [[array_merge($this->validData(), ['callbackUrl' => 'https://www.example.com/'])]],
            'invalid character in callbackToken' => [[array_merge($this->validData(), ['callbackToken' => 'in!valid'])]],
        ];
    }

    /**
     * @return array
     */
    private function validData(): array
    {
        return [
            'apiUrl' => 'https://www.example.com',
            'apiKey' => '7f4d86bb-4d44-4285-864f-65fca6e6b2cd',
            'callbackUrl' => 'https://www.example.com?token={token}',
            'callbackToken' => 'CT74.TSzcQWiVXZen2TP0eDf9_ByWT1vDT~sTD6wh5fSG-mrjQaljCH5yMxWFzo',
        ];
    }

    /**
     * @param array $array
     * @param string $key
     * @return array
     */
    private function unsetKey(array $array, string $key): array
    {
        unset($array[$key]);
        return $array;
    }
}
